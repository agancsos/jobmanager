package services
import (
	"../../data"
	"strconv"
	"../../sr"
)

type DataService struct {
	connection  data.DataConnection
	ss          *SecurityService
	cs          *ConfigurationService
}
var __data_service__ *DataService;

func (x *DataService) Initialize() {
	x.ss = GetSecurityServiceInstance();
	x.cs = GetConfigurationServiceInstance();
	x.connection = &data.DataConnectionSQLite{};
	x.connection.SetConnectionString((sr.GetSRInstance()).GetDatabaseFilePath(x.cs.GetProperty("databaseFilePath", "").(string)));
	var skipCreateSchema,_ = strconv.Atoi(x.cs.GetProperty("skipSchema", "0").(string));
	if skipCreateSchema < 1 {
		x.createSchema();
	}
}

func GetDataServiceInstance() IService {
    if __data_service__ == nil {
        __data_service__ = &DataService{};
		__data_service__.Initialize();
    }
    return __data_service__;
}

func (x *DataService) createSchema() {
	var queries = []string {
		"CREATE TABLE IF NOT EXISTS FLAG (FLAG_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, FLAG_NAME CHARACTER, FLAG_VALUE CHARACTER, LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP)",
        "CREATE TABLE IF NOT EXISTS MESSAGE (MESSAGE_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, MESSAGE_LEVEL INTEGER, MESSAGE_CATEGORY INTEGER, MESSAGE_TEXT CHARACTER, LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP)",
        `CREATE TABLE IF NOT EXISTS COMPANY (COMPANY_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, COMPANY_NAME CHARACTER, COMPANY_STREET CHARACTER, COMPANY_CITY CHARACTER, COMPANY_STATE CHARACTER, COMPANY_COUNTRY CHARACTER,
			COMPANY_DESCRIPTION CHARACTER, COMPANY_INDUSTRY CHARACTER, COMPANY_EMPLOYEES INTEGER DEFAULT '0', COMPANY_RATING INTEGER DEFAULT '0', COMPANY_ISPUBLIC INTEGER DEFAULT '0', COMPANY_APPLICANT_ENDPOINT CHARACTER,
			LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP)`,
        "CREATE TABLE IF NOT EXISTS PROFILE (PROFILE_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, PROFILE_NAME CHARACTER NOT NULL, PROFILE_FILTER CHARACTER default '', LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP)",
        "CREATE TABLE IF NOT EXISTS COMPANY_TAG(COMPANY_ID INTEGER NOT NULL, TAG_LABEL CHARACTER NOT NULL, LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(COMPANY_ID))",
        `CREATE TABLE IF NOT EXISTS RESULT (RESULT_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, PROFILE_ID INTEGER NOT NULL, RESULT_CODE CHARACTER, COMPANY_ID INTEGER, POSTED_DATE TIMESTAMP, RESULT_APPLIED INTEGER DEFAULT '0',
			RESULT_TITLE CHARACTER, RESULT_DESCRIPTION CHARACTER, RESULT_REQUIRED CHARACTER, RESULT_OPTIONAL CHARACTER, RESULT_BENEFITS CHARACTER, RESULT_OTHERDETAILS CHARACTER, RESULT_MIN_YEARS_NEEDED INTEGER DEFAULT '0',
			RESULT_SOURCE_ENDPOINT CHARACTER, RESULT_BASE_ENDPOINT INTEGER, RESULT_STATE INTEGER DEFAULT '0', LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (RESULT_BASE_ENDPOINT) REFERENCES ENDPOINT(ENDPOINT_ID), FOREIGN KEY (PROFILE_ID) REFERENCES PROFILE(PROFILE_ID))`,
    };

    for _, query := range queries {
        x.RunServiceQuery(query);
    }
}

func (x *DataService) RunServiceQuery(query string) bool {
	return x.connection.RunQuery(query);
}

func (x *DataService) ServiceQuery(query string) *data.DataTable {
	return x.connection.Query(query);
}

