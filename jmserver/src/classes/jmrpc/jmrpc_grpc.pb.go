// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jmrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	GetCompanies(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	AddCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	UpdateCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	HasCompany(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	RemoveCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetCompanies(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/CompanyService/GetCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/CompanyService/AddCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/CompanyService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) HasCompany(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/CompanyService/HasCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) RemoveCompany(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/CompanyService/RemoveCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	GetCompanies(context.Context, *EmptyMessage) (*JsonMessage, error)
	AddCompany(context.Context, *JsonMessage) (*BooleanMessage, error)
	UpdateCompany(context.Context, *JsonMessage) (*BooleanMessage, error)
	HasCompany(context.Context, *StringMessage) (*BooleanMessage, error)
	RemoveCompany(context.Context, *JsonMessage) (*BooleanMessage, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetCompanies(context.Context, *EmptyMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) AddCompany(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompany not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateCompany(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyServiceServer) HasCompany(context.Context, *StringMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCompany not implemented")
}
func (UnimplementedCompanyServiceServer) RemoveCompany(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCompany not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_GetCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyService/GetCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanies(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyService/AddCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddCompany(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_HasCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).HasCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyService/HasCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).HasCompany(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_RemoveCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RemoveCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompanyService/RemoveCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RemoveCompany(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanies",
			Handler:    _CompanyService_GetCompanies_Handler,
		},
		{
			MethodName: "AddCompany",
			Handler:    _CompanyService_AddCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "HasCompany",
			Handler:    _CompanyService_HasCompany_Handler,
		},
		{
			MethodName: "RemoveCompany",
			Handler:    _CompanyService_RemoveCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jmrpc.proto",
}

// ResultsServiceClient is the client API for ResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultsServiceClient interface {
	GetResults(ctx context.Context, in *GetResultsMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	AddResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	UpdateResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	RemoveResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	MarkApplied(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	MarkOffered(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	MarkAccepted(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	MarkRead(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	MarkRejected(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
}

type resultsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultsServiceClient(cc grpc.ClientConnInterface) ResultsServiceClient {
	return &resultsServiceClient{cc}
}

func (c *resultsServiceClient) GetResults(ctx context.Context, in *GetResultsMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/GetResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) AddResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/AddResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) UpdateResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/UpdateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) RemoveResult(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/RemoveResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) MarkApplied(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/MarkApplied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) MarkOffered(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/MarkOffered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) MarkAccepted(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/MarkAccepted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) MarkRead(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/MarkRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) MarkRejected(ctx context.Context, in *JsonMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ResultsService/MarkRejected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultsServiceServer is the server API for ResultsService service.
// All implementations must embed UnimplementedResultsServiceServer
// for forward compatibility
type ResultsServiceServer interface {
	GetResults(context.Context, *GetResultsMessage) (*JsonMessage, error)
	AddResult(context.Context, *JsonMessage) (*BooleanMessage, error)
	UpdateResult(context.Context, *JsonMessage) (*BooleanMessage, error)
	RemoveResult(context.Context, *JsonMessage) (*BooleanMessage, error)
	MarkApplied(context.Context, *JsonMessage) (*BooleanMessage, error)
	MarkOffered(context.Context, *JsonMessage) (*BooleanMessage, error)
	MarkAccepted(context.Context, *JsonMessage) (*BooleanMessage, error)
	MarkRead(context.Context, *JsonMessage) (*BooleanMessage, error)
	MarkRejected(context.Context, *JsonMessage) (*BooleanMessage, error)
	mustEmbedUnimplementedResultsServiceServer()
}

// UnimplementedResultsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResultsServiceServer struct {
}

func (UnimplementedResultsServiceServer) GetResults(context.Context, *GetResultsMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedResultsServiceServer) AddResult(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResult not implemented")
}
func (UnimplementedResultsServiceServer) UpdateResult(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResult not implemented")
}
func (UnimplementedResultsServiceServer) RemoveResult(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResult not implemented")
}
func (UnimplementedResultsServiceServer) MarkApplied(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkApplied not implemented")
}
func (UnimplementedResultsServiceServer) MarkOffered(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkOffered not implemented")
}
func (UnimplementedResultsServiceServer) MarkAccepted(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAccepted not implemented")
}
func (UnimplementedResultsServiceServer) MarkRead(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRead not implemented")
}
func (UnimplementedResultsServiceServer) MarkRejected(context.Context, *JsonMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRejected not implemented")
}
func (UnimplementedResultsServiceServer) mustEmbedUnimplementedResultsServiceServer() {}

// UnsafeResultsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultsServiceServer will
// result in compilation errors.
type UnsafeResultsServiceServer interface {
	mustEmbedUnimplementedResultsServiceServer()
}

func RegisterResultsServiceServer(s grpc.ServiceRegistrar, srv ResultsServiceServer) {
	s.RegisterService(&ResultsService_ServiceDesc, srv)
}

func _ResultsService_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/GetResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).GetResults(ctx, req.(*GetResultsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_AddResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).AddResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/AddResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).AddResult(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_UpdateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).UpdateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/UpdateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).UpdateResult(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_RemoveResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).RemoveResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/RemoveResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).RemoveResult(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_MarkApplied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).MarkApplied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/MarkApplied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).MarkApplied(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_MarkOffered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).MarkOffered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/MarkOffered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).MarkOffered(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_MarkAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).MarkAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/MarkAccepted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).MarkAccepted(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_MarkRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).MarkRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/MarkRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).MarkRead(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_MarkRejected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).MarkRejected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsService/MarkRejected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).MarkRejected(ctx, req.(*JsonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ResultsService_ServiceDesc is the grpc.ServiceDesc for ResultsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResultsService",
	HandlerType: (*ResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResults",
			Handler:    _ResultsService_GetResults_Handler,
		},
		{
			MethodName: "AddResult",
			Handler:    _ResultsService_AddResult_Handler,
		},
		{
			MethodName: "UpdateResult",
			Handler:    _ResultsService_UpdateResult_Handler,
		},
		{
			MethodName: "RemoveResult",
			Handler:    _ResultsService_RemoveResult_Handler,
		},
		{
			MethodName: "MarkApplied",
			Handler:    _ResultsService_MarkApplied_Handler,
		},
		{
			MethodName: "MarkOffered",
			Handler:    _ResultsService_MarkOffered_Handler,
		},
		{
			MethodName: "MarkAccepted",
			Handler:    _ResultsService_MarkAccepted_Handler,
		},
		{
			MethodName: "MarkRead",
			Handler:    _ResultsService_MarkRead_Handler,
		},
		{
			MethodName: "MarkRejected",
			Handler:    _ResultsService_MarkRejected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jmrpc.proto",
}
